services:
  # ---------------------
  # Cube.js (Semantic Layer / Analytical Backend)
  # ---------------------
  cubejs:
    image: cubejs/cube:latest # Official Cube.js image
    build:
      context: ./cubejs # Optional: build Cube.js from local Dockerfile
    networks:
      - vero # Shared network for inter-service communication
    ports:
      - "4000:4000" # Cube.js REST API
      - "15432:15432" # Cube SQL API (PostgreSQL wire protocol)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/readyz"] # Healthcheck for readiness
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    env_file:
      - ./cubejs/.env.dev # Cube.js environment variables for development
    volumes:
      - ./cubejs/model:/cube/conf/model # Mount Cube.js data models
      - ./cubejs/views:/cube/conf/model/views # Mount Cube.js views
    depends_on:
      - postgres # Start after PostgreSQL is ready

  # ---------------------
  # PostgreSQL (Data Warehouse for Cube.js)
  # ---------------------
  postgres:
    image: postgres:latest # Official PostgreSQL image (version pinned)
    build:
      context: ./db # Custom build context for Postgres
    networks:
      - vero
    ports:
      - "5432:5432" # PostgreSQL port
    env_file:
      - ./db/.env.dev # Development credentials and settings
    volumes:
      - db-data:/var/lib/postgresql/data # Persistent DB storage

  # ---------------------
  # MCP Server (Custom AI Agent / API Middleware)
  # ---------------------
  mcp-server:
    build:
      context: ./mcp-server
    depends_on:
      cubejs:
        condition: service_healthy # Wait for Cube.js health before starting
    restart: on-failure # Restart on crash
    networks:
      - vero
    ports:
      - "8000:8000" # MCP API port
    env_file:
      - ./mcp-server/.env.dev # Environment variables
    command: # Arguments passed via env vars
      - --endpoint
      - ${MCP_ENDPOINT}
      - --api_secret
      - ${MCP_API_SECRET}

  # ---------------------
  # Metabase (BI Dashboard)
  # ---------------------
  metabase:
    image: metabase/metabase:latest # Metabase
    ports:
      - "3000:3000" # Web interface
    env_file:
      - ./metabase/.env.dev
    depends_on:
      metabase-db:
        condition: service_healthy
    volumes:
      - metabase-data:/metabase-data # Persistent Metabase app data
    networks:
      - vero

  # ---------------------
  # PostgreSQL for Metabase
  # ---------------------
  metabase-db:
    image: postgres:13
    ports:
      - "5433:5432" # Host 5433 maps to container 5432
    env_file:
      - ./metabase/.env.dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metabase"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - metabase-db-data:/var/lib/postgresql/data
    networks:
      - vero

# ---------------------
# Volumes for Persistence
# ---------------------
volumes:
  metabase-db-data: # Metabase PostgreSQL DB data
  metabase-data: # Metabase application data
  db-data: # Cube.js PostgreSQL DB data
  airbyte_data: # Airbyte internal state and logs (not currently used in this config)

# ---------------------
# Shared Network
# ---------------------
networks:
  vero:
    driver: bridge # Isolated shared network for all services
