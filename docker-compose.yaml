services:
  # ---------------------
  # Cube.js (Semantic Layer)
  # ---------------------
  cubejs:
    image: cubejs/cube:latest # Base Cube.js image from Docker Hub

    build:
      context: ./cubejs # Optional: local build context for customizations

    networks:
      - sora # Attach to a shared Docker network

    ports:
      - 4000:4000 # Expose Cube.js API on port 4000
      - 15432:15432 # Expose Cube.js SQL API (PostgreSQL protocol) on port 15432

    healthcheck: # Health check to verify Cube.js is ready
      test: ["CMD", "curl", "-f", "http://localhost:4000/readyz"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

    env_file:
      - ./cubejs/.env.dev # Environment variables for Cube.js (dev settings)

    volumes:
      - ./cubejs/model:/cube/conf/model # Mount your schema files into the container

    depends_on:
      - postgres # Ensure Postgres is started before Cube.js

  # ---------------------
  # PostgreSQL (Data Warehouse Layer)
  # ---------------------
  postgres:
    image: postgres:latest # Official PostgreSQL image

    networks:
      - sora # Same network as other services

    ports:
      - "5432:5432" # Expose Postgres for external connections

    env_file:
      - ./db/.env.dev # Dev environment variables for Postgres setup

    volumes:
      - db-data:/var/lib/postgresql/data # Persist database data
      - ./db/init/create_schema.sql:/docker-entrypoint-initdb.d/create_schema.sql # Init script to create schema
      - ./db/init/import_dummy_data.sql:/docker-entrypoint-initdb.d/import_dummy_data.sql # Load dummy data at startup

  # ---------------------
  # MCP Server (AI Agent API Layer)
  # ---------------------
  mcp-server:
    build:
      context: ./mcp-server # Build the MCP server from local Dockerfile context

    depends_on:
      cubejs:
        condition: service_healthy # Wait for Cube.js to be fully healthy before starting

    restart: on-failure # Automatically restart on failure (for stability)

    networks:
      - sora # Same internal network

    ports:
      - 8000:8000 # Expose the MCP API on port 8000

    env_file:
      - ./mcp-server/.env.dev # Load environment variables for MCP server (dev)

    command: # Start the MCP server with runtime args from the env file
      - --endpoint
      - ${ENDPOINT}
      - --api_secret
      - ${API_SECRET}

# ---------------------
# Named Volumes
# ---------------------
volumes:
  db-data: # Persistent volume for PostgreSQL data

# ---------------------
# Networks
# ---------------------
networks:
  sora:
    driver: bridge # Use the default Docker bridge driver for container networking
