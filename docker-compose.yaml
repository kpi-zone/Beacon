services:
  # ---------------------
  # Cube.js (Semantic Layer / Analytical Backend)
  # ---------------------
  cubejs:
    image: cubejs/cube:latest # Official Cube.js image

    build:
      context: ./cubejs # Optional: use local Dockerfile/customizations

    networks:
      - vero # Attach to a shared network for communication with other services

    ports:
      - "4000:4000" # Cube.js REST API
      - "15432:15432" # Cube SQL API (PostgreSQL wire protocol)

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/readyz"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

    env_file:
      - ./cubejs/.env.dev # Environment variables for Cube.js (dev only)

    volumes:
      - ./cubejs/model:/cube/conf/model # Mount Cube.js schema/model definitions

    depends_on:
      - postgres # Start only after PostgreSQL is up (data warehouse)

  # ---------------------
  # PostgreSQL (Data Warehouse for Cube.js)
  # ---------------------
  postgres:
    image: postgres:latest # Official PostgreSQL image

    networks:
      - vero

    ports:
      - "5432:5432" # Default PostgreSQL port

    env_file:
      - ./db/.env.dev # DB credentials and setup (dev only)

    volumes:
      - db-data:/var/lib/postgresql/data # Persist data across restarts
      - ./db/init/create_schema.sql:/docker-entrypoint-initdb.d/create_schema.sql # Initialize schema
      - ./db/init/import_dummy_data.sql:/docker-entrypoint-initdb.d/import_dummy_data.sql # Import dummy data

  # ---------------------
  # MCP Server (Custom AI Agent / API Middleware)
  # ---------------------
  mcp-server:
    build:
      context: ./mcp-server # Custom logic for MCP backend

    depends_on:
      cubejs:
        condition: service_healthy # Wait until Cube.js is ready

    restart: on-failure # Restart on crash/failure

    networks:
      - vero

    ports:
      - "8000:8000" # MCP server HTTP API

    env_file:
      - ./mcp-server/.env.dev # Development config for MCP

    command: # Uses values from root .env file or Compose override
      - --endpoint
      - ${MCP_ENDPOINT}
      - --api_secret
      - ${MCP_API_SECRET}

  # ---------------------
  # Metabase (BI Dashboard / Visualization Layer)
  # ---------------------
  metabase:
    image: stephaneturquay/metabase-arm64:latest

    ports:
      - "3000:3000" # Web interface

    env_file:
      - ./metabase/.env.dev # Environment configuration

    depends_on:
      metabase-db:
        condition: service_healthy

    volumes:
      - metabase-data:/metabase-data # Persistent Metabase app data

    networks:
      - vero

  # ---------------------
  # PostgreSQL for Metabase (App Database)
  # ---------------------
  metabase-db:
    image: postgres:13

    ports:
      - "5433:5432" # Default PostgreSQL port

    env_file:
      - ./metabase/.env.dev # PostgreSQL credentials

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metabase"]
      interval: 10s
      timeout: 5s
      retries: 5

    volumes:
      - metabase-db-data:/var/lib/postgresql/data # Persistent app DB

    networks:
      - vero

# ---------------------
# Named Volumes (Data Persistence)
# ---------------------
volumes:
  metabase-db-data: # Volume for Metabase DB data
  metabase-data: # Volume for Metabase application state
  db-data: # Volume for main PostgreSQL (Cube.js warehouse)

# ---------------------
# Shared Networks
# ---------------------
networks:
  vero:
    driver: bridge # Shared network for Cube.js, MCP, Metabase
